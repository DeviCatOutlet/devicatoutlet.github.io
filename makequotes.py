# Rebuild quotes.md (and possibly others) from _quotes.json
import os
import re
import json
import collections
from pprint import pprint

try:
	import sys
	sys.path.append("../shed")
	import emotify
except ImportError:
	# Can't find emotify? No probs, just don't convert them.
	def get_emote_list(): return { }
else:
	# Activate BTTV and FFZ emotes from DeviCat's channel
	emotify.load_bttv("devicat")
	emotify.load_ffz("54212603")
	from emotify import get_emote_list # More convenient to have just the function

CACHE_FILE = "_quotes.json"
with open(CACHE_FILE) as f: cache = json.load(f)

# TODO: Migrate to using cache["quotes"] instead of (not as well as) this emote list
emotes = get_emote_list()
for name, id in cache.get("emotes", {}).items():
	emotes[name] = "https://static-cdn.jtvnw.net/emoticons/v2/%s/default/light/1.0" % id
def convert_emotes(msg):
	words = msg.split()
	for i, word in enumerate(words):
		if "_" in word:
			base, tag = word.split("_", 1)
			if base in cache["emotes"]:
				emotes[word] = "https://static-cdn.jtvnw.net/emoticons/v2/%s/default/light/1.0" % (cache["emotes"][base] + "_" + tag)
			# Otherwise fall through. Maybe there are actual emotes with underscores.
		if word not in emotes: continue
		words[i] = '![%s](%s "%s")' % (word, emotes[word], word) # Assumes emote names never contain double quotes
	return " ".join(words)

most_quoted = collections.Counter()
name_fold = {} # Map case-folded names to the first seen form; whatever we first see, we keep.
name_fold["devi_cat"] = "DeviCat" # Fold some names together to gather renamed people
name_fold["ciriion"] = "Ciri_Ion"
for Erin in "derppicklejar dearpicklejar pickle pickledeggrin picklewash mydearestpickle mydearpotato potatowhydidyoupostthat".split():
	name_fold[Erin] = "Erin (various)"
missing = []

# TODO: Give better descriptions
hyper_lynx = "\n".join("* [Quotes from %s](%s)" % (filename.replace("quotes", ""), filename) for filename in cache["sections"])

def save_quotes(quotes, filename, desc):
	with open("../devicatoutlet.github.io/%s.md" % filename, "w") as f:
		print("""# Twitch Quotes

<!-- This file is generated by deviquotes.py from the MegaClip project, and
should not be edited manually. -->
<style>img {display: inline-block;} li {line-height: 35px;}</style>

During live streams, funny things that people say can be recorded for posterity
by the faithful bot and the mod team. %s

%s
* [Latest quotes](quotes)
""" % (desc, hyper_lynx), file=f)
		for idx, quote in enumerate(quotes):
			if quote is None:
				if not idx: continue # Ignore the shim
				missing.append(idx)
				print("* <missing quote %d, ask CandiCat for it please>" % idx, file=f)
			else:
				print("* %d: %s" % (idx, convert_emotes(quote)), file=f)
				m = re.search(r"-(\w+) \([0-9][0-9]-[A-Z][a-z][a-z]-[0-9][0-9]\)$", quote)
				if m: most_quoted[name_fold.setdefault(m.group(1).casefold(), m.group(1))] += 1
		if missing: print("\nThis list is missing %d quotes, plus any that have been recently added." % len(missing), file=f)
		else: print("\nThere may be quotes newer than these that have yet to be collected.\n", file=f)

quotes = cache["quotes"]
save_quotes(quotes, "quotes", """So far, %d quotes have been recorded. To
see them in chat, ask the bot for a quote with the command `!quote N` for some
number N.""" % (len(quotes) - 1))

if "--all" in sys.argv:
	for filename, desc in cache["sections"].items():
		save_quotes(cache[filename], filename, desc + """, %d quotes were recorded. They cannot
be seen in chat, but have been archived here with their original numbers.""" % (len(cache[filename]) - 1))

if missing: print("Missing quote(s) %s" % ", ".join(map(str, missing)))
else: print("Last quote:\n%d: %s" % (len(quotes)-1, quotes[-1]))
print()
